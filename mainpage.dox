/**
\mainpage Easy CNC (eCNC)

Easy CNC (eCNC) is an open source software to control a CNC machine that can mount different utensils. 
The SW will run on <a href="http://arduino.cc/"> Arduino</a> which receives command from a computer. 
The commands follow a standard programming language named G-code.

\tableofcontents

\section  how_get_it How get it

You can download the last release from <a href="https://sourceforge.net/projects/easycnc/files/">here</a>. 
The packet contains two directories: easy_CNC and easy_CNC_Controller. 
The first one contains the code of the firmware that must be loaded into the Arduino. 
The second one contains the code of the control GUI.

\section installation Installation

The code into easy_CNC is an <a href="https://www.eclipse.org/">Eclipse</a> project. 
You can import the code with the Eclipse environment. Then, you  need an Eclipse plugin named 
<a href="http://marketplace.eclipse.org/content/arduino-eclipse-ide">Arduino eclipse IDE</a> to
compile and load the code into an Arduino board. The code was conceived for Arduino Mega 2560. 
However, with few changes, it can be adapted to Arduino Due or One.

After the board connection, you setup the Arduino eclipse plugin with the board version and the 
USB port, thus you can compile the code and if it ends without errors, you can load the firmware 
with the interface provided by the plugin. You should see a blinking led on the board, it assures 
that the code is loading.

To interact with Arduino and provide it the commands that will move your CNC machine, you can use 
the eCNC Control GUI that is located into easy_CNC_Control. You need the 
<a href="https://processing.org/">Processing</a> environment. After the download and the installation, 
you load the easy_CNC_Control.pde file and run it. 


\section conf Configuration

Before compiling the firmware, you must configure the code according your hardware.
The config.h file gathers all the parameters to setup your hardware, such as max motors speed, 
Arduino pins setup.

\section struct Structure

The code is written in C++, it is simple, intuitive and uses all the feature of object oriented (OO) 
paradigm. You can configure the main parameters of 
the machine in the config.h file. The cycle of life of the firmware follows six steps:
- <b>step 1</b> - waiting for G-code command;
- <b>step 2</b> - receiving a new G-code command;
- <b>step 3</b> - decoding G-code command;
- <b>step 4</b> - executing the G-code command;
- <b>step 5</b> - reporting the status;
- <b>step 6</b> - return back to step 1.

The code follows a hierarchical structure with three layers: first layer receives and decodes the G-code 
commands. It is implemented into the class GCode. Second layer coordinates the CNC router and the utensil. 
The control of the routing is implemented into CNC_Router, instead the classes for the utensils is a derived class 
from the virtual class Utensil. Until now, the only utensil class implemented is MillingMachine, it manages the milling 
machine parameters and control the utensil.
Third layer contains all the class that implements the motor driving. All the classes that are derived from the 
virtual class MSMC (MSMC_ULN2003A, MSMC_A4988) belong to the third layer.

This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.
To view a copy of this license, visit <a href="http://creativecommons.org/licenses/by-sa/4.0/">http://creativecommons.org/licenses/by-sa/4.0/</a>
*/